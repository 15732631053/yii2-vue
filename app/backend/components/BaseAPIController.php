<?php
/**
 * Created by PhpStorm.
 * AppLication mobo
 * User: mobo
 * Date: 2018/3/27
 * Time: 15:41
 */

namespace backend\components;

use common\base\UserToken;
use common\components\Hashids\Hashids;
use yii\filters\ContentNegotiator;
use yii\helpers\ArrayHelper;
use yii\rest\Controller;
use yii\web\Response;
use Yii;

class BaseAPIController extends BaseController
{
    /**
     * @var string 程序运行开始时间
     */
    private $_stime;
    /**
     * @var string 平台 暂只有pcweb
     */
    private $platform;
    /**
     * @var array requestData
     */
    public $json;
    /**
     * @var array 错误信息
     */
    private $errMsg;
    private $hash;
    /**
     * @var string 接口作者
     */
    public $author = 'hl';
    /**
     * @var string hashsort
     */
    private $hashSort = 'my';
    /**
     * @var string 需要解密的id
     */
    public $requestId = '';
    public $reponseIds = 'id';
    /**
     * @var string 返回类型 item单组数据 list列表数据
     */
    public $reponseType = 'item';
    public $token;

    public function init()
    {
//        header("Access-Control-Allow-Origin: *"); // 允许任意域名发起的跨域请求
        $this->hash = new Hashids($this->hashSort, 8);
        $post = Yii::$app->request->post();
        $get = Yii::$app->request->get();
        $this->json = array_merge($get, $post);
        $this->_stime = microtime(true);
        parent::init(); // TODO: Change the autogenerated stub
        $this->initRequest();
        Yii::$app->getResponse()->on(Response::EVENT_BEFORE_SEND, [$this, 'beforeSend']);
    }

    private function wrongMsgType($extra)
    {
        return [
            [
                'code' => '400',
                'msg' => '',
            ],
            [
                'code' => '401',
                'msg' => '',
            ],
            [
                'code' => '402',
                'msg' => '',
            ]
        ];
    }


    /**
     * AppLication: initRequest 初始化
     * Author: hl
     */
    public function initRequest()
    {


        $this->checkSign();
        $this->checkJson();
    }

    /**
     * AppLication: isRequired 检查必填参数是否存在
     * Author: hl
     * @param $params
     * @param bool $loginRequired 是否需要登陆
     * @return bool
     */
    public function isRequired($params, $loginRequired = false)
    {
        $isInjson = array_intersect($params, array_keys($this->json));
        if ($isInjson != $params) {
            $diff = array_diff($params, $isInjson);
            $this->errMsg('402', '缺少必填项:' . implode(',', $diff));
        }
        if ($loginRequired) $this->checkToken();
        return true;
    }

    /**
     * AppLication: errMsg 错误信息
     * Author: hl
     * @param $code
     * @param $msg
     */
    public function errMsg($code, $msg)
    {
        header('Content-Type:application/json; charset=utf-8');
        $this->errMsg = [
            'code' => $code,
            'msg' => $msg,
            'status' => 'N',
            'author' => $this->author,
        ];
        $return = json_encode($this->errMsg);
        echo isset($this->json['jsonpcallback']) ? $this->json['jsonpcallback'] . "(" . $return . ")" : $return;
        exit();  //总感觉这种实现方式有点low


    }

    /**
     * AppLication: checkSign 验签
     * Author: hl
     * request keys order in asc md5(keys.$values)===sign
     */
    protected function checkSign()
    {
        ksort($this->json);//按字母顺序排序
        if (!array_key_exists('sign', $this->json)) $this->errMsg('400', '缺少sign');
        $sign = $this->json['sign'];
        unset($this->json['sign']);
        $keys = '';
        $Values = '';
        foreach ($this->json as $k => $v) {
            $keys .= $k;
            $Values .= $v;
        }
        if (md5($keys . $Values) !== $sign) $this->errMsg('401', '验签失败');
    }

    /**
     * AppLication: checkToken
     * Author: hl 检查token过期时间
     */
    protected function checkToken()
    {
        if (!array_key_exists('token', $this->json)) $this->errMsg('400', '缺少token');
        if (!array_key_exists('uid', $this->json)) $this->errMsg('400', '缺少uid');
        $uid = $this->json['uid'];
        $token = $this->json['token'];
        $token = UserToken::checkToken($uid, $token);
        if ($token) {
            $this->token = $token;
            return $token;
        } else {
            $this->errMsg('400', 'token不存在');
        }
    }

    /**
     * AppLication: checkJson
     * Author: hl
     * @return bool
     */
    protected function checkJson()
    {
        if (!$this->requestId) return true;
        foreach (explode(',', $this->requestId) as $v) {
            if (array_key_exists($v, $this->json)) {

                $decodeRes = $this->hash->decode($this->json[$v]);
                if (!$decodeRes) {
                    $this->errMsg('403', '解密id失败');
                    return false;
                }
                $this->json[$v] = $decodeRes[0];
            }

        }
        return true;
    }


    /**
     * 程序运行时间
     * return
     */
    private function runtimes()
    {
        $total = microtime(true) - $this->_stime;
        $str_total = var_export($total, TRUE);
        if (substr_count($str_total, "E")) {
            $float_total = floatval(substr($str_total, 5));
            $total = $float_total / 100000;
        }
        return floatval(number_format($total, 3));

    }

    /**
     * AppLication: reponseData
     * Author: hl
     * @param $data
     * @return array
     */
    protected function reponseData($data)
    {
        $data = !isset($data['data']) ? [] : $data['data'];
        if (!is_array($data)) return $data;
        if (!$this->reponseIds) return $data;
        if ($this->reponseType == 'list') {
            foreach ($data as &$v) {
                foreach (explode(',', $this->reponseIds) as $j) {
                    if (array_key_exists($j, $v)) $v[$j] = ($this->hash->encode($v[$j]));
                }
            }
        } else if ($this->reponseType == 'item') {
            foreach (explode(',', $this->reponseIds) as $j) {
                if (array_key_exists($j, $data)) $data[$j] = ($this->hash->encode($data[$j]));
            }
        }
        return $data;
    }

    /**
     * AppLication: decodeID
     * Author: hl
     * @param $arrPos
     * @param $encodeIds
     * @return bool
     */
    public function decodeID($arrPos)
    {
        $id = ArrayHelper::getValue($this->json, $arrPos, null);
        if ($id === null) return false;

        $decodeRes = $this->hash->decode($id);
        if (!$decodeRes) {
            $this->errMsg('403', '解密id失败,idValue:' . $id);
            return false;
        }
        ArrayHelper::setValue($this->json, $arrPos, $decodeRes[0]);
        return $decodeRes[0];
    }

    /**
     * AppLication: afterAction
     * Author: hl
     * @param \yii\base\Action $action
     * @param mixed $result
     * @return mixed
     */
    public function afterAction($action, $result)
    {

        $result['data'] = $this->reponseData($result);
        $data['runtime'] = $this->runtimes();
        $data['author'] = $this->author;
        $data['token'] = $this->token;
        if (!array_key_exists('status', $result)) $data['status'] = 'Y';
        if (!array_key_exists('code', $result)) $data['code'] = intval('200');
        $data = $data + $result;
        return parent::afterAction($action, $data); // TODO: Change the autogenerated stub
    }


}